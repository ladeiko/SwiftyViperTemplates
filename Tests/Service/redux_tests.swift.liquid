{% include 'header' %}

import XCTest
import ViperServices
{% if custom_parameters.redux_service_observable %}import RxSwift{% endif %}

final class {{ prefix }}{{ module_info.name }}ServiceTests: XCTestCase {
override func setUp() {
        super.setUp()
        // Put setup code here. This method is called before the invocation of each test method in the class.
    }

    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
    }

    func testBoot() {

        //given
        let launchOptions: [UIApplication.LaunchOptionsKey: Any]? = nil
        let container = DefaultViperServicesContainer()
        var failed: [ViperServiceBootFailureResult]?
        let bootExpect = expectation(description: "Boot expectation"){% if custom_parameters.redux_service_observable %}
  let subscribeExpect = expectation(description: "Subscribe expectation")
  let disposeBag = DisposeBag()
{% endif %}

//when
XCTAssertNoThrow(try container.register({{ prefix }}{{ module_info.name }}ServiceImpl() as {{ prefix }}{{ module_info.name }}Service))
XCTAssertThrowsError(try container.register({{ prefix }}{{ module_info.name }}ServiceImpl() as {{ prefix }}{{ module_info.name }}Service))
//then
        XCTAssertNotNil(container.resolve() as {{ prefix }}{{ module_info.name }}Service)
container.boot(launchOptions: launchOptions) { (result) in

            switch result {
            case .succeeded: break
            case .failed(let failedServices):
                failed = failedServices
            }

            bootExpect.fulfill()
        }

        wait(for: [bootExpect], timeout: 1.0)

        XCTAssertNil(failed)
        XCTAssertNotNil(container.resolve() as {{ prefix }}{{ module_info.name }}Service)

{% if custom_parameters.redux_service_observable %}

  let service = container.resolve() as {{ prefix }}{{ module_info.name }}Service

  {% if custom_parameters.redux_service_generate_state_vars_getters %}
    {% if custom_parameters.redux_service_state_vars %}
      {% assign module_config_vars = custom_parameters.redux_service_state_vars | split: "," %}
      {% for config_var in module_config_vars %}
        {% assign var_components = config_var | split: "=" %}
        let _var_{{ var_components[0] }} = service.{{ var_components[0] }}
      {% endfor %}
    {% endif %}
  {% endif %}

  service.observable()
  .subscribe(onNext: { service in

  {% if custom_parameters.redux_service_generate_state_vars_getters %}
    {% if custom_parameters.redux_service_state_vars %}
      {% assign module_config_vars = custom_parameters.redux_service_state_vars | split: "," %}
      {% for config_var in module_config_vars %}
        {% assign var_components = config_var | split: "=" %}
        guard _var_{{ var_components[0] }} == service.{{ var_components[0] }} else { return }
      {% endfor %}
    {% endif %}
  {% endif %}

  subscribeExpect.fulfill()
  })
              .disposed(by: disposeBag)
  
          wait(for: [subscribeExpect], timeout: 1.0){% endif %}
}

}