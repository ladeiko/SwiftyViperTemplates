{% include 'header' %}

import XCTest
import ViperServices

final class {{ prefix }}{{ module_info.name }}ServiceTests: XCTestCase {
override func setUp() {
        super.setUp()
        // Put setup code here. This method is called before the invocation of each test method in the class.
    }

    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
    }

    func testBoot() {

        //given
        let launchOptions: [UIApplication.LaunchOptionsKey: Any]? = nil
        let container = DefaultViperServicesContainer()
        var failed: [ViperServiceBootFailureResult]?
        let bootExpect = expectation(description: "Boot expectation")

        //when
        XCTAssertNoThrow(try container.register({{ prefix }}{{ module_info.name }}ServiceImpl() as {{ prefix }}{{ module_info.name }}Service))
XCTAssertThrowsError(try container.register({{ prefix }}{{ module_info.name }}ServiceImpl() as {{ prefix }}{{ module_info.name }}Service))
//then
        XCTAssertNotNil(container.resolve() as {{ prefix }}{{ module_info.name }}Service)
container.boot(launchOptions: launchOptions) { (result) in

            switch result {
            case .succeeded: break
            case .failed(let failedServices):
                failed = failedServices
            }

            bootExpect.fulfill()
        }

        wait(for: [bootExpect], timeout: 1.0)

        XCTAssertNil(failed)
        XCTAssertNotNil(container.resolve() as {{ prefix }}{{ module_info.name }}Service)
    }

}