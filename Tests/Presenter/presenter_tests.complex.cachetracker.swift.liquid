{% include 'header' %}

import XCTest
import CacheTracker
import ViperMcFlurryX

class {{ prefix }}{{ module_info.name }}PresenterTest: XCTestCase {

    override func setUp() {
        super.setUp()
        // Put setup code here. This method is called before the invocation of each test method in the class.
    }

    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
    }

    class MockInteractor: {{ prefix }}{{ module_info.name }}InteractorInput {

        // MARK: - Vars

        private var tracking = false

        // MARK: - {{ prefix }}{{ module_info.name }}InteractorInput

        {% if custom_parameters.extended_configure %}func configure(with config: {{ prefix }}{{ module_info.name }}ModuleConfig) {
        }{% else %}func configure() {
        }{% endif %}

        func deinitialize() {}

        func isDeliveringModelsListChanges() -> Bool {
            return tracking
        }

        func startDeliveringModelsListChanges() {
            assert(Thread.isMainThread)
            XCTAssertFalse(tracking)
            tracking = true
        }

        func stopDeliveringModelsListChanges() {
            tracking = false
        }

        func initialStateOfModelsList() -> [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEntityModel>] {
            return []
        }

    }

    class MockRouter: {{ prefix }}{{ module_info.name }}RouterInput {

        weak var calleeOutput: (RamblerViperModuleOutput /* Add supported protocols here, e.g: & AnotherModuleOutput */)!
        weak var transitionHandler: RamblerViperModuleTransitionHandlerProtocol!

        // MARK: - Vars
        // TODO: Place your code here

        // MARK: - {{ prefix }}{{ module_info.name }}RouterInput

        func createEmbeddableModule(with model: {{ prefix }}{{ module_info.name }}ModuleEntityModel, lazyAllocation: Bool) -> {{ prefix }}{{ module_info.name }}EmbeddableEmbedBlock {

            weak var embeddedInput: {{ prefix }}{{ module_info.name }}EmbeddableModuleInput?

            let factory = {{ prefix }}{{ module_info.name }}EmbeddableModuleConfigurator()
            let configurationBlock: EmbeddedModuleConfigurationBlock = { [weak self] (moduleInput) -> RamblerViperModuleOutput? in
                let moduleInput = moduleInput as! {{ prefix }}{{ module_info.name }}EmbeddableModuleInput
                embeddedInput = moduleInput
                {% if custom_parameters.embeddable_extended_configure %}moduleInput.configure(with: {{ prefix }}{{ module_info.name }}EmbeddableModuleConfig({% if custom_parameters.embeddable_extended_configure_vars %}{% assign module_config_vars = custom_parameters.embeddable_extended_configure_vars  | split: "," %}{% for config_var in module_config_vars %}{% assign var_components = config_var  | split: "=" %}{% if forloop.index0 != 0 %}, {% endif %}{{ var_components[0] }}: {% if var_components[1] contains '?' %}nil{% else %}{{var_components[1]}}(){% endif %} /*TODO*/{% endfor %}{% endif %})){% else %}moduleInput.configure(){% endif %}
                return nil // or self?.calleeOutput
            }

            {% if custom_parameters.mcflurry_swift == 'true' %}
            let nativeEmbedder = transitionHandler.createEmbeddableModuleUsingFactory(factory, configurationBlock: configurationBlock, lazyAllocation: lazyAllocation)
            {% else %}
            let nativeEmbedder = transitionHandler.createEmbeddableModule!(usingFactory: factory, configurationBlock: configurationBlock, lazyAllocation: lazyAllocation)
            {% endif %}

            // Sometimes embeddable mobule can be reattached to another containerView
            // therefore we should track number of add/remove operations
            // and call remove only when required
            var embedBalanceCounter = 0

            let embedder: {{ prefix }}{{ module_info.name }}EmbeddableEmbedBlock = { [weak embeddedInput] containerView in
                let nativeRemover = nativeEmbedder(containerView)
                
                embedBalanceCounter += 1
                
                if embedBalanceCounter == 1 {
                    // Example:
                    //embeddedInput?.moduleDidBecomeVisible()
                }

                let  remover: {{ prefix }}{{ module_info.name }}EmbeddableRemoveBlock = { [weak embeddedInput] in
                    embedBalanceCounter -= 1
                    assert(embedBalanceCounter >= 0)
                    if embedBalanceCounter == 0 {
                        let embeddedInput = embeddedInput // keep strong ref
                        nativeRemover()
                        // Example:
                        //embeddedInput?.moduleDidBecomeInvisible()
                    }
                }
                return remover
            }

            return embedder
        }

    }

    class MockViewController: {{ prefix }}{{ module_info.name }}ViewInput {

        // MARK: - Vars
        // TODO: Place your code here

        // MARK: - {{ prefix }}{{ module_info.name }}ViewInput

        func loadInitialModelsList(_ state: [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEmbeddableModel>]) {

        }

        func applyModelsListChanges(_ changes: [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEmbeddableModel>]) {

        }

    }
}
