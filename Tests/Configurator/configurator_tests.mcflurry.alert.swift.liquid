{% include 'header' %}

import XCTest
final class {{ prefix }}{{ module_info.name }}ModuleConfiguratorTests: XCTestCase {
override func setUp() {
        super.setUp()
        // Put setup code here. This method is called before the invocation of each test method in the class.
    }

    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
    }

    func testConfigureModuleForViewController() {

        //given
        let viewController = {{ prefix }}{{ module_info.name }}ViewControllerMock()
let configurator = {{ prefix }}{{ module_info.name }}ModuleConfigurator()
let config = {{ prefix }}{{ module_info.name }}ModuleInputConfig(title: "Title", message: "Message")
//when
        configurator.configureModuleForViewInput(viewInput: viewController, with: config)

        //then
        XCTAssertNotNil(viewController.output, "{{ prefix }}{{ module_info.name }}ViewController is nil after configuration")
XCTAssertTrue(viewController.output is {{ prefix }}{{ module_info.name }}Presenter, "output is not {{ prefix }}{{ module_info.name }}Presenter")
let presenter: {{ prefix }}{{ module_info.name }}Presenter = viewController.output as! {{ prefix }}{{ module_info.name }}Presenter
XCTAssertNotNil(presenter.view, "view in {{ prefix }}{{ module_info.name }}Presenter is nil after configuration")
XCTAssertNotNil(presenter.router, "router in {{ prefix }}{{ module_info.name }}Presenter is nil after configuration")
XCTAssertTrue(presenter.router is {{ prefix }}{{ module_info.name }}Router, "router is not {{ prefix }}{{ module_info.name }}Router")
XCTAssertTrue((presenter.router as!{{ prefix }}{{ module_info.name }}Router).transitionHandler is {{ prefix }}{{ module_info.name }}ViewController, "router.transitionHandler is not {{ prefix }}{{ module_info.name }}ViewController")
let interactor: {{ prefix }}{{ module_info.name }}Interactor = presenter.interactor as! {{ prefix }}{{ module_info.name }}Interactor
XCTAssertNotNil(interactor.output, "output in {{ prefix }}{{ module_info.name }}Interactor is nil after configuration")
}

    class {{ prefix }}{{ module_info.name }}ViewControllerMock: {{ prefix }}{{ module_info.name }}ViewController {

    }
}