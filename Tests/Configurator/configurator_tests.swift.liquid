{% include 'header' %}

import XCTest
final class {{ prefix }}{{ module_info.name }}ModuleConfiguratorTests: XCTestCase {
override func setUp() {
        super.setUp()
        // Put setup code here. This method is called before the invocation of each test method in the class.
    }

    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
    }

    func testConfigureModuleForViewController() {

        //given
        let viewController = {{ prefix }}{{ module_info.name }}ViewControllerMock()
let configurator = {{ prefix }}{{ module_info.name }}ModuleConfigurator()
{% if custom_parameters.extended_configure_vars %}
  {% assign module_config_vars = custom_parameters.extended_configure_vars | split: "," %}
  {% for config_var in module_config_vars %}
    {% assign var_components = config_var | split: "=" %}let {{ var_components[0] }}: {{ var_components[1] }} = ... // TODO: Place your code here
  {% endfor %}
{% endif %}
let config = {{ prefix }}{{ module_info.name }}ModuleInputConfig({% if custom_parameters.extended_configure_vars %}
  {% assign module_config_vars = custom_parameters.extended_configure_vars | split: "," %}{% for config_var in module_config_vars %}
    {% assign var_components = config_var | split: "=" %}{% if forloop.index0 != 0 %},
    {% endif %}
    {{ var_components[0] }}: {{ var_components[0] }}{% endfor %}
{% endif %})
//when
        configurator.configureModuleForViewInput(viewInput: viewController, with: config)

        //then
        XCTAssertNotNil(viewController.output, "{{ prefix }}{{ module_info.name }}ViewController is nil after configuration")
XCTAssertTrue(viewController.output is {{ prefix }}{{ module_info.name }}Presenter, "output is not {{ prefix }}{{ module_info.name }}Presenter")
let presenter: {{ prefix }}{{ module_info.name }}Presenter = viewController.output as! {{ prefix }}{{ module_info.name }}Presenter
XCTAssertNotNil(presenter.view, "view in {{ prefix }}{{ module_info.name }}Presenter is nil after configuration")
XCTAssertNotNil(presenter.router, "router in {{ prefix }}{{ module_info.name }}Presenter is nil after configuration")
XCTAssertTrue(presenter.router is {{ prefix }}{{ module_info.name }}Router, "router is not {{ prefix }}{{ module_info.name }}Router")
let interactor: {{ prefix }}{{ module_info.name }}Interactor = presenter.interactor as! {{ prefix }}{{ module_info.name }}Interactor
XCTAssertNotNil(interactor.output, "output in {{ prefix }}{{ module_info.name }}Interactor is nil after configuration")
}

    class {{ prefix }}{{ module_info.name }}ViewControllerMock: {{ prefix }}{{ module_info.name }}ViewController {

    }
}