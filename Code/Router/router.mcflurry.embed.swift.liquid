{% include 'header' %}

import ViperMcFlurryX_Swift
import TopViewControllerDetection

final class {{ prefix }}{{ module_info.name }}Router: {{ prefix }}{{ module_info.name }}RouterInput {

    // MARK: - VIPER Vars

    weak var calleeOutput: (ViperModuleOutput /* Add supported protocols here, e.g: & AnotherModuleOutput */)!
    weak var transitionHandler: ViperModuleTransitionHandler?

    // MARK: - {{ prefix }}{{ module_info.name }}RouterInput
    
    func embedSomeModule() {
        transitionHandler.embedModuleUsing(SomeModuleConfigurator(), into: {{ prefix }}{{ module_info.name }}ModuleContainerIdentifier.module1.rawValue).thenChainUsingBlock { (module) -> ViperModuleOutput? in
            let module = module as! SomeModuleInput
            module.configure()
            return nil // or self.calleeOutput
        }
    }

    /*  // Example
    func dismiss() {
        transitionHandler.closeCurrentModule(true)
    }

    func dismissAsync() async {
        await withCheckedContinuation { continuation in
            transitionHandler.closeCurrentModule(true) {
                continuation.resume(with: .success(()))
            }
        }
    }
    */

    /* // Example
    func showSomeModule() {
        Task { @MainActor in
            while true {  
                
                guard let topController = UIApplication.shared.findTopViewControllerAsync(), topController === self.transitionHandler else {
                    try? await Task.sleep(5_000_000)
                    continue
                }

                topController.openModuleUsingFactory(SomeModuleConfigurator()) { (sourceModuleTransitionHandler, destinationModuleTransitionHandler) in
                    let sourceViewController = sourceModuleTransitionHandler as! UIViewController
                    let destinationViewController = destinationModuleTransitionHandler as! UIViewController
                    sourceViewController.present(destinationViewController, animated: true, completion: nil)
                }.thenChainUsingBlock { (moduleInput) -> ViperModuleOutput? in
                    (moduleInput as! SomeModuleInput).configure()
                    return nil // or self.calleeOutput
                }
                break
            }
            }
        }
    }
    */

    // MARK: - Helpers
    // TODO: Place your code here

}