{% include 'header' %}

import ViperMcFlurryX_Swift
import TopViewControllerDetection

class {{ prefix }}{{ module_info.name }}Router: NSObject, {{ prefix }}{{ module_info.name }}RouterInput {
    
    // MARK: - VIPER Vars

    weak var calleeOutput: (ViperModuleOutput /* Add supported protocols here, e.g: & AnotherModuleOutput */)!
    weak var transitionHandler: ViperModuleTransitionHandler!
    weak var output: {{ prefix }}{{ module_info.name }}RouterOutput!

    // MARK: - Vars

    private struct Tab {
        let id: {{ prefix }}{{ module_info.name }}ModuleTab
        weak var controller: UIViewController?
    }
    
    private var tabs: [Tab] = []

    // MARK: - {{ prefix }}{{ module_info.name }}RouterInput

    func embedTabs(_ module: [{{ prefix }}{{ module_info.name }}ModuleTab], current: {{ prefix }}{{ module_info.name }}ModuleTab?, with config: {{ prefix }}{{ module_info.name }}ModuleInputConfig) {

        let existing: [{{ prefix }}{{ module_info.name }}ModuleTab: UIViewController] = tabs.reduce(into: [:], { $0[$1.id] = $1.controller })
        tabs = []

        let viewControllers: [UIViewController] = module.reduce(into: []) { (controllers, module) in
            var controller: UIViewController! = existing[module]

            if controller == nil {
                switch module {
                case .exampleTab:
                    self.transitionHandler.openModuleUsingFactory(SomeModuleConfigurator()) { (src, dst) in
                        controller = UINavigationController(rootViewController: dst as! UIViewController)
                    }.thenChainUsingBlock { (moduleInput) -> ViperModuleOutput? in
                        (moduleInput as! SomeModuleInput).configure(with: .init())
                        return nil // or self.calleeOutput
                    }
                }
            }

            tabs.append(.init(id: module, controller: controller))
            controllers.append(controller)
        }

        let tabbarController = transitionHandler as! UITabBarController
        tabbarController.delegate = self
        tabbarController.viewControllers = viewControllers

        if let current = current, let index = tabs.firstIndex(where: { $0.id == current }) {
            tabbarController.selectedIndex = index
        }
    }

    func showTab(_ tab: {{ prefix }}{{ module_info.name }}ModuleTab) {
        
        let index = {{ prefix }}{{ module_info.name }}ModuleTab.allCases.firstIndex(of: tab)!
        let tabbarController = transitionHandler as! UITabBarController

        guard tabbarController.selectedIndex != index else {
            return
        }

        tabbarController.selectedIndex = index
        output.routerDidChangeCurrentModule(tab)
    }

    /*  // Example
    func dismiss() {
        transitionHandler.closeCurrentModule(true)
    }

    func dismissAsync() async {
        await withCheckedContinuation { continuation in
            transitionHandler.closeCurrentModule(true) {
                continuation.resume(with: .success(()))
            }
        }
    }
    */

    /* // Example
    func showSomeModule() {
        Task { @MainActor in
            while true {  
                guard let topController = UIApplication.shared.findTopViewControllerAsync(), topController === self.transitionHandler else {
                    try? await Task.sleep(5_000_000)
                    continue
                }
  
                topController.openModuleUsingFactory(SomeModuleConfigurator()) { (sourceModuleTransitionHandler, destinationModuleTransitionHandler) in
                    let sourceViewController = sourceModuleTransitionHandler as! UIViewController
                    let destinationViewController = destinationModuleTransitionHandler as! UIViewController
                    sourceViewController.present(destinationViewController, animated: true, completion: nil)
                }.thenChainUsingBlock { (moduleInput) -> ViperModuleOutput? in
                    (moduleInput as! SomeModuleInput).configure()
                    return nil // or self.calleeOutput
                }
                break
              }
            }
        }
    }
    */

    // MARK: - Helpers
    // TODO: Place your code here

}

extension {{ prefix }}{{ module_info.name }}Router: UITabBarControllerDelegate {

    func tabBarController(_ tabBarController: UITabBarController, didSelect viewController: UIViewController) {
        if let id = tabs.first(where: { $0.controller == viewController })?.id {
            output.routerDidChangeCurrentModule(id)
        }
    }

}