{% include 'header' %}

import {% if custom_parameters.mcflurry_swift == 'true' %}ViperMcFlurryX_Swift{% else %}ViperMcFlurryX{% endif %}
import TopViewControllerDetection

class {{ prefix }}{{ module_info.name }}Router: {{ prefix }}{{ module_info.name }}RouterInput {

    // MARK: - VIPER Vars

    weak var calleeOutput: ({% if custom_parameters.mcflurry_swift != "true" %}Rambler{% endif %}ViperModuleOutput /* Add supported protocols here, e.g: & AnotherModuleOutput */)!
    weak var transitionHandler: {% if custom_parameters.mcflurry_swift != "true" %}Rambler{% endif %}ViperModuleTransitionHandler{% if custom_parameters.mcflurry_swift != "true" %}Protocol{% endif %}!

    // MARK: - Vars
    // TODO: Place your code here

    // MARK: - {{ prefix }}{{ module_info.name }}RouterInput

    /*  // Example
    func dismiss() {
        transitionHandler.closeCurrentModule{% if custom_parameters.mcflurry_swift != "true" %}!{% endif %}(true)
    }
    */

    /* // Example
    func showSomeModule() {
        func run() {

            // NOTE: This is required for 'present' method only!
            UIApplication.shared.findTopViewController { topController in

                guard let topController = topController, topController === self.transitionHandler else { 
                    return DispatchQueue.main.asyncAfter(deadline: .now() + 0.05, execute: run)
                }
    
                {% if custom_parameters.mcflurry_swift == 'true' %}
                topController.openModuleUsingFactory(SomeModuleConfigurator()) { (sourceModuleTransitionHandler, destinationModuleTransitionHandler) in
                {% else %}
                topController.openModule!(usingFactory: SomeModuleConfigurator()) { (sourceModuleTransitionHandler, destinationModuleTransitionHandler) in
                {% endif %}
                    let sourceViewController = sourceModuleTransitionHandler as! UIViewController
                    let destinationViewController = destinationModuleTransitionHandler as! UIViewController
    
                    sourceViewController.present(destinationViewController, animated: true, completion: nil)
                {% if custom_parameters.mcflurry_swift == 'true' %}
                }.thenChainUsingBlock { (moduleInput) -> ViperModuleOutput? in
                {% else %}
                }.thenChain { (moduleInput) -> RamblerViperModuleOutput? in
                {% endif %}
                    (moduleInput as! SomeModuleInput).configure()
                    return nil // or self.calleeOutput
                }

            }            
        }

        run()
    }
    */

    // MARK: - Helpers
    // TODO: Place your code here

}
