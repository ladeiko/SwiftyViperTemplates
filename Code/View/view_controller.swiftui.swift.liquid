{% include 'header' %}

import SwiftUI

class {{ prefix }}{{ module_info.name }}ViewController: UIViewController {

    // MARK: - VIPER Vars

    var output: {{ prefix }}{{ module_info.name }}ViewOutput!

    // MARK: - Vars
    
    private var wrapperController: {{ prefix }}{{ module_info.name }}ViewControllerWrapper?
    private var rootView: {{ prefix }}{{ module_info.name }}RootView { wrapperController!.rootView }

    // MARK: - Life cycle

    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = .clear
        wrapperController = {{ prefix }}{{ module_info.name }}ViewControllerWrapper()
        wrapperController!.rootView.delegate = self
        addChild(wrapperController!)
        wrapperController!.beginAppearanceTransition(true, animated: false)
        wrapperController!.view.frame = CGSize(origin: .zero, size: view.bounds.size)
        view.addSubview(wrapperController!.view)
        wrapperController!.endAppearanceTransition()
        wrapperController!.didMove(toParent: self)
        output.viewIsReady()
    }

    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        wrapperController?.view.frame = CGSize(origin: .zero, size: view.bounds.size)
    }
}

extension {{ prefix }}{{ module_info.name }}ViewController {

    // MARK: - Helpers
    // TODO: Place your code here
}

extension {{ prefix }}{{ module_info.name }}ViewController: {{ prefix }}{{module_info.name}}ViewInput {

    func configure(with theme: {{ prefix }}{{ module_info.name }}ViewInputTheme) {
        // TODO: Place your code here
    }

}

extension {{ prefix }}{{ module_info.name }}ViewController: {{ prefix }}{{ module_info.name }}RootViewDelegate {

    // MARK: - UI Actions
    // TODO: Place your code here

    func didTapOnSampleButton() {
        print("did tap on sample button")
        rootView.viewState.sampleValue += 1
    }

}

fileprivate class {{ prefix }}{{ module_info.name }}ViewControllerWrapper: UIHostingController<{{ prefix }}{{ module_info.name }}RootViewImpl> {

    @objc required dynamic init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder, rootView: {{ prefix }}{{ module_info.name }}RootViewImpl())
    }

    init() {
        super.init(rootView: {{ prefix }}{{ module_info.name }}RootViewImpl())
    }

}