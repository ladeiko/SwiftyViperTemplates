{% include 'header' %}

import UIKit
import CacheTracker
import CacheTrackerConsumer

class {{ prefix }}{{ module_info.name }}ViewController: UICollectionViewController, {{ prefix }}{{module_info.name}}ViewInput {

    // MARK: - VIPER Vars

    var output: {{ prefix }}{{ module_info.name }}ViewOutput!

    // MARK: - Outlets
    // TODO: Place your code here

    // MARK: - Vars

    private let consumer: CacheTrackerPlainRecurrentConsumer<{{ prefix }}{{ module_info.name }}ModuleEmbeddableModel> = CacheTrackerPlainRecurrentConsumer<{{ prefix }}{{ module_info.name }}ModuleEmbeddableModel>()
    private var context: {{ prefix }}{{ module_info.name }}ViewCellContext!
    
    // MARK: - Life cycle

    override func viewDidLoad() {
        super.viewDidLoad()
        setupContext()
        setupCollectioView()
        setupConsumer()
        output.viewIsReady()
    }

    // MARK: - {{ prefix }}{{module_info.name}}ViewInput

    func configure(with theme: {{ prefix }}{{ module_info.name }}ViewInputTheme) {
        // TODO: Place your code here
    }

    func loadInitialModelsList(_ state: [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEmbeddableModel>]) {
        consumer.reset(with: state)
        if isViewLoaded {
            let collectionView = self.collectionView!
            
            // Check if this reset occurred just after view was loaded
            // but is still not visible: in this situation we can reload
            // cells without animation (this also helps to exclude visual bugs 
            //  when cell is resized with animation when collection view size is changed)
            //  NOTE: use self.view not collectionView
            if view.superview == nil {
                UIView.performWithoutAnimation {
                    collectionView.reloadData()
                    collectionView.layoutIfNeeded()
                    collectionView.scrollRectToVisible(CGRect(x: 0, y: 0, width: 1, height: 0), animated: false)
                }
            }
            else {
                collectionView.performBatchUpdates({
                    collectionView.reloadSections(IndexSet(integer: 0))
                }, completion:  { _ in
                    if self.consumer.numberOfItems() > 0 {
                        collectionView.layoutIfNeeded()
                        collectionView.scrollRectToVisible(CGRect(x: 0, y: 0, width: 1, height: 0), animated: true)
                    }
                })
            }
        }
    }

    func applyModelsListChanges(_ changes: [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEmbeddableModel>]) {
        consumer.willChange()
        consumer.consume(transactions: changes)
        consumer.didChange()
    }

    // MARK: - UI Actions
    // TODO: Place your code here

    // MARK: - UICollectionViewDataSource

    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return consumer.numberOfItems()
    }

    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "Default", for: indexPath) as! {{ prefix }}{{ module_info.name }}ViewCell
        let item = consumer.object(at: indexPath.row)
        cell.configure(with: item.model, in: context)
        return cell
    }

    // MARK: - UICollectionViewDelegate

    override func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        let cell = cell as! {{ prefix }}{{ module_info.name }}ViewCell
        let item = consumer.object(at: indexPath.row)
        cell.willDisplay(item)
    }

    override func collectionView(_ collectionView: UICollectionView, didEndDisplaying cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        let cell = cell as! {{ prefix }}{{ module_info.name }}ViewCell
        cell.stopDisplay()
    }

    override func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        //let item = consumer.object(at: indexPath.row)
        // TODO: Place your code here
    }

    // MARK: - Helpers

    private func setupContext() {
        context = {{ prefix }}{{ module_info.name }}ViewCellContext(
             //loadModelImage: { [weak self] model, completion in
            //
            //    guard let sself = self else {
            //        return DispatchQueue.main.async { completion(nil) }
            //   }
            //
            //    return sself.output.viewNeedsImage(for: model, completion: completion)
            //}
        )
    }

    private func setupConsumer() {
        //consumer.equalityChecker = { $0 == $1 }
        consumer.delegate = self
    }

    private func setupCollectioView() {
        // TODO: Place your code here
    }
}
