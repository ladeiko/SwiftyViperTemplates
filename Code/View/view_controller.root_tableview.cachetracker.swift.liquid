{% include 'header' %}

import UIKit
import CacheTracker
import CacheTrackerConsumer
//import ViperMcFlurryX_Swift

final class {{ prefix }}{{ module_info.name }}ViewController: UITableViewController, {{ prefix }}{{module_info.name}}ViewInput {

    // MARK: - VIPER Vars

    var output: {{ prefix }}{{ module_info.name }}ViewOutput!

    // MARK: - Outlets
    // TODO: Place your code here

    // MARK: - Vars

    private let consumer: CacheTrackerPlainConsumer<{{ prefix }}{{ module_info.name }}ModuleEntityModel> = CacheTrackerPlainConsumer<{{ prefix }}{{ module_info.name }}ModuleEntityModel>()
    private var context: {{ prefix }}{{ module_info.name }}ViewCellContext!

    // MARK: - Life cycle

    override func viewDidLoad() {
        super.viewDidLoad()
        setupContext()
        setupTableView()
        setupConsumer()
        output.viewIsReady()
    }

    // MARK: - {{ prefix }}{{module_info.name}}ViewInput

    func configure(with theme: {{ prefix }}{{ module_info.name }}ViewInputTheme) {
        // TODO: Place your code here
    }

    func loadInitialModelsList(_ state: [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEntityModel>]) {
        consumer.reset(with: state)
        tableView?.reloadData()
    }

    func applyModelsListChanges(_ changes: [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEntityModel>]) {
        consumer.willChange()
        consumer.consume(transactions: changes)
        consumer.didChange()
    }

    // MARK: - UI Actions
    // TODO: Place your code here

    // MARK: - UITableViewDataSource

    override func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }

    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return consumer.numberOfItems()
    }

    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: {{ prefix }}{{ module_info.name }}ViewCell.cellIdentifier) as! {{ prefix }}{{ module_info.name }}ViewCell
        let model = consumer.object(at: indexPath.row)
        cell.configure(with: model, in: context)
        return cell
    }

    // MARK: - UITableViewDelegate

    override func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        if let cell = cell as? {{ prefix }}{{ module_info.name }}ViewCell {
            cell.willDisplay()
        }
    }

    override func tableView(_ tableView: UITableView, didEndDisplaying cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        if let cell = cell as? {{ prefix }}{{ module_info.name }}ViewCell {
            cell.stopDisplay()
        }
    }

    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        //let model = consumer.object(at: indexPath.row)
        // TODO: Place your code here
    }

    // MARK: - Helpers

    private func setupContext() {
        context = {{ prefix }}{{ module_info.name }}ViewCellContext(
             //loadModelImage: { [weak self] model in
            //    return await self?.output.viewNeedsImage(for: model)
            //}
        )
    }

    private func setupConsumer() {
        //consumer.equalityChecker = { $0 == $1 }
        consumer.delegate = self
    }

    private func setupTableView() {
        // TODO: Place your code here
    }

}

#if canImport(SwiftUI) && DEBUG
import SwiftUI

fileprivate struct {{ prefix }}{{ module_info.name }}ViewControllerContainerView: UIViewControllerRepresentable {
    typealias UIViewControllerType = {{ prefix }}{{ module_info.name }}ViewController

    func makeUIViewController(context: Context) -> UIViewControllerType {
        return {{ prefix }}{{ module_info.name }}ViewController()
    }

    func updateUIViewController(_ uiViewController: UIViewControllerType, context: Context) {}
}

struct {{ prefix }}{{ module_info.name }}ViewController_Previews: PreviewProvider {
    static var previews: some View {
        {{ prefix }}{{ module_info.name }}ViewControllerContainerView()
            .colorScheme(.light)
        {{ prefix }}{{ module_info.name }}ViewControllerContainerView()
            .colorScheme(.dark)
    }
}
#endif