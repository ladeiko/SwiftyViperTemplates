{% include 'header' %}

import UIKit

class {{ prefix }}{{ module_info.name }}ViewController: UIViewController {

    // MARK: - VIPER Vars

    var output: {{ prefix }}{{ module_info.name }}ViewOutput!

    // MARK: - Outlets
    // TODO: Place your code here

    @IBOutlet weak var tableView: UITableView!

    // MARK: - Vars

    private var context: {{ prefix }}{{ module_info.name }}ViewCellContext!
    private let models = {{ prefix }}{{ module_info.name }}ModuleEntityModel.allCases

    // MARK: - Life cycle

    override func viewDidLoad() {
        super.viewDidLoad()
        setupContext()
        setupTableView()
        output.viewIsReady()
    }

}

extension {{ prefix }}{{ module_info.name }}ViewController: {{ prefix }}{{module_info.name}}ViewInput {

    func configure(with theme: {{ prefix }}{{ module_info.name }}ViewInputTheme) {
        // TODO: Place your code here
    }
}

extension {{ prefix }}{{ module_info.name }}ViewController {
    // MARK: - UI Actions
    // TODO: Place your code here
}

extension {{ prefix }}{{ module_info.name }}ViewController {

    // MARK: - Helpers

    private func setupContext() {
        context = {{ prefix }}{{ module_info.name }}ViewCellContext(
             //loadModelImage: { [weak self] model, completion in
            //
            //    guard let sself = self else {
            //        return DispatchQueue.main.async { completion(nil) }
            //   }
            //
            //    return sself.output.viewNeedsImage(for: model, completion: completion)
            //}
        )
    }

    private func setupTableView() {
        // TODO: Place your code here
    }

}

extension  {{ prefix }}{{ module_info.name }}ViewController: UITableViewDataSource {

    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return models.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "Default") as! {{ prefix }}{{ module_info.name }}ViewCell
        let model = models[indexPath.item]
        cell.configure(with: model, in: context)
        return cell
    }

}

extension  {{ prefix }}{{ module_info.name }}ViewController: UITableViewDelegate {

    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        let cell = cell as! {{ prefix }}{{ module_info.name }}ViewCell
        cell.willDisplay()
    }

    func tableView(_ tableView: UITableView, didEndDisplaying cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        let cell = cell as! {{ prefix }}{{ module_info.name }}ViewCell
        cell.stopDisplay()
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        //let model = models[indexPath.item]
        // TODO: Place your code here
    }

}

#if canImport(SwiftUI) && DEBUG && false // set to true, for preview using SwiftUI
import SwiftUI

fileprivate class {{ prefix }}{{ module_info.name }}ViewControllerFakeOutputForPreview: {{ prefix }}{{ module_info.name }}ViewOutput {
    func viewIsReady() {}
}

@available(iOS 13.0, *)
fileprivate struct {{ prefix }}{{ module_info.name }}ViewControllerRepresentable: UIViewControllerRepresentable {
    func updateUIViewController(_ uiViewController: {{ prefix }}{{ module_info.name }}ViewController, context: Context) {}
    func makeUIViewController(context: Context) -> {{ prefix }}{{ module_info.name }}ViewController {
        let controller = {{ prefix }}{{ module_info.name }}ViewController()
        controller.output = {{ prefix }}{{ module_info.name }}ViewControllerFakeOutputForPreview()
        // TODO: Place your code here
        return controller
    }
}

@available(iOS 13.0, *)
struct {{ prefix }}{{ module_info.name }}ViewController_Previews: PreviewProvider {
    static var previews: some View {
        {{ prefix }}{{ module_info.name }}ViewControllerRepresentable()
            .preferredColorScheme(.light)
            //.previewDevice("iPhone X")
        //{{ prefix }}{{ module_info.name }}ViewControllerRepresentable()
        //    .preferredColorScheme(.dark)
        //    .previewDevice("iPhone 12")
    }
}
#endif