{% include 'header' %}

import UIKit
//import ViperMcFlurryX_Swift

class {{ prefix }}{{ module_info.name }}ViewController: UIViewController {

    // MARK: - VIPER Vars

    var output: {{ prefix }}{{ module_info.name }}ViewOutput!

    // MARK: - Outlets
    // TODO: Place your code here

    private weak var tableView: UITableView!

    // MARK: - Vars

    private var context: {{ prefix }}{{ module_info.name }}ViewCellContext!
    private let models = {{ prefix }}{{ module_info.name }}ModuleEntityModel.allCases

    // MARK: - Life cycle

    override func viewDidLoad() {
        super.viewDidLoad()
        setupContext()
        setupTableView()
        output.viewIsReady()
    }

}

extension {{ prefix }}{{ module_info.name }}ViewController: {{ prefix }}{{ module_info.name }}ViewInput {
    func configure(with theme: {{ prefix }}{{ module_info.name }}ViewInputTheme) {
        // TODO: Place your code here
    }
}

extension {{ prefix }}{{ module_info.name }}ViewController {
    // MARK: - UI Actions
    // TODO: Place your code here
}

extension {{ prefix }}{{ module_info.name }}ViewController {
    
    // MARK: - Helpers

    private func setupContext() {
        context = {{ prefix }}{{ module_info.name }}ViewCellContext(
            //loadModelImage: { [weak self] model in
            //    return await self?.output.viewNeedsImage(for: model)
            //}
        )
    }

    private func setupTableView() {
        // TODO: Place your code here
    }

}

extension {{ prefix }}{{ module_info.name }}ViewController: UITableViewDataSource {

    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return models.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: {{ prefix }}{{ module_info.name }}ViewCell.cellIdentifier) as! {{ prefix }}{{ module_info.name }}ViewCell
        let model = models[indexPath.item]
        cell.configure(with: model, in: context)
        return cell
    }

}

extension {{ prefix }}{{ module_info.name }}ViewController: UITableViewDelegate {

    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        let cell = cell as! {{ prefix }}{{ module_info.name }}ViewCell
        cell.willDisplay()
    }

    func tableView(_ tableView: UITableView, didEndDisplaying cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        let cell = cell as! {{ prefix }}{{ module_info.name }}ViewCell
        cell.stopDisplay()
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        //let model = models[indexPath.item]
        // TODO: Place your code here
    }

}

//extension {{ prefix }}{{ module_info.name }}ViewController: ViperModuleViewControllerPresenter {
//
//   func viperModuleViewControllerShouldPresent(in viewController: UIViewController) -> Bool {
//        return true
//    }
//
//    func viperModuleViewControllerPresent(in viewController: UIViewController) {
//        viewController.present(self, animated: true)
//    }
//}

#if canImport(SwiftUI) && DEBUG
import SwiftUI

fileprivate struct {{ prefix }}{{ module_info.name }}ViewControllerContainerView: UIViewControllerRepresentable {
    typealias UIViewControllerType = {{ prefix }}{{ module_info.name }}ViewController

    func makeUIViewController(context: Context) -> UIViewControllerType {
        return {{ prefix }}{{ module_info.name }}ViewController()
    }

    func updateUIViewController(_ uiViewController: UIViewControllerType, context: Context) {}
}

struct {{ prefix }}{{ module_info.name }}ViewController_Previews: PreviewProvider {
    static var previews: some View {
        {{ prefix }}{{ module_info.name }}ViewControllerContainerView()
            .colorScheme(.light)
        {{ prefix }}{{ module_info.name }}ViewControllerContainerView()
            .colorScheme(.dark)
    }
}
#endif