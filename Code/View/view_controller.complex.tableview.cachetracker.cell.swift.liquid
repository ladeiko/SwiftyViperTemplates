{% include 'header' %}

import UIKit
class {{ prefix }}{{ module_info.name }}ViewCell: UITableViewCell {
    
    static let cellIdentifier = "Default"

    // MARK: - Outlets
    // 
    // private  weak var imageView: UIImageView!
    // TODO: Place your code here

    // MARK: - Vars

//    private static var imageSessionCounter: Int = 0
//    private static func generateSession() -> Int {
//        let value = imageSessionCounter
//        imageSessionCounter = imageSessionCounter.addingReportingOverflow(1).partialValue
//        return value
//    }

//    private var imageSession: Int?
    private var removeEmbeddableBlock: {{ prefix }}{{ module_info.name }}EmbeddableRemoveBlock?
    private var context: {{ prefix }}{{ module_info.name }}ViewCellContext?
    private var model: {{ prefix }}{{ module_info.name }}ModuleEntityModel?
    // MARK: - Public

    func configure(with model: {{ prefix }}{{ module_info.name }}ModuleEntityModel, in context: {{ prefix }}{{ module_info.name }}ViewCellContext) {
        self.context = context
        self.model = model

//        let imageSession: Int = Self.generateSession()
//        self.imageSession = imageSession
//      
//      Task { @MainActor in
//          guard let image = await context.loadModelImage(model) else {
//              return
//          }
//
//          guard model == self.model, self.imageSession == imageSession else {
//              return
//          }
//
//          self.imageSession = nil
//          self.imageView.image = image
//      }

        // TODO: Place your code here
    }

    func willDisplay(_ embeddable: {{ prefix }}{{ module_info.name }}Embeddable) {
        removeEmbeddable() // remove previous if for some reason it was not removed
        removeEmbeddableBlock = embeddable.embed(contentView) // TODO use view you prefer
    }

    func stopDisplay() {
        removeEmbeddable()
    }

    // MARK: - Life cycle

    deinit {
        removeEmbeddable()
    }

    override func prepareForReuse() {
        removeEmbeddable()
        model = nil
        context = nil
//        imageSession = nil        
        super.prepareForReuse()
    }

    // MARK: - Helpers

    private func removeEmbeddable() {
        removeEmbeddableBlock?()
        removeEmbeddableBlock = nil
    }

    // TODO: Place your code here

    //    private func setupImageView() {
    //        let imageView = UIImageView(frame: .init(origin: .zero, size: contentView.bounds.size))
    //        imageView.autoresizingMask = [.flexibleWidth, .flexibleHeight]
    //        contentView.addSubview(imageView)
    //        self.imageView = imageView 
    //    }

}

#if canImport(SwiftUI) && DEBUG
import SwiftUI

fileprivate class {{ prefix }}{{ module_info.name }}ViewControllerCell: UIViewController {
    override func viewDidLoad() {
        super.viewDidLoad()
        let cell = {{ prefix }}{{ module_info.name }}ViewCell(style: .default, reuseIdentifier: {{ prefix }}{{ module_info.name }}ViewCell.cellIdentifier)
        cell.autoresizingMask = [.flexibleWidth, .flexibleTopMargin, .flexibleBottomMargin]
        cell.bounds = .init(origin: .zero, size: .init(width: view.bounds.size.width, height: 44))
        cell.center = .init(x: view.bounds.midX, y: view.bounds.midY)
        view.addSubview(cell)
    }
}

fileprivate struct {{ prefix }}{{ module_info.name }}ViewControllerCellContainerView: UIViewControllerRepresentable {
    typealias UIViewControllerType = {{ prefix }}{{ module_info.name }}ViewControllerCell
    func makeUIViewController(context: Context) -> UIViewControllerType {
        return {{ prefix }}{{ module_info.name }}ViewControllerCell()
    }

    func updateUIViewController(_ uiViewController: UIViewControllerType, context: Context) {}
}

struct {{ prefix }}{{ module_info.name }}ViewControllerCell_Previews: PreviewProvider {
    static var previews: some View {
        {{ prefix }}{{ module_info.name }}ViewControllerCellContainerView()
            .colorScheme(.light)
        {{ prefix }}{{ module_info.name }}ViewControllerCellContainerView()
            .colorScheme(.dark)
    }
}
#endif