{% include 'header' %}

import UIKit
import ViperMcFlurryX_Swift
//import ViperMcFlurryX_Swift

final class {{ prefix }}{{ module_info.name }}ViewController: UIViewController {
// MARK: - VIPER Vars

    var output: {{ prefix }}{{ module_info.name }}ViewOutput!
// MARK: - Outlets
    // TODO: Place your code here
    
    private weak var embedSomeModuleSegueContainer: UIView!

    // MARK: - Vars
    // TODO: Place your code here

    // MARK: - Life cycle

    override func viewDidLoad() {
        super.viewDidLoad()
        setupContainerView()
        output.viewIsReady()
    }

    // MARK: - Helpers

    private func setupContainerView() {
        let embedSomeModuleSegueContainer = UIView(frame: .init(origin: .zero, size: view.bounds.size))
        embedSomeModuleSegueContainer.backgroundColor = .clear
        view.addSubview(embedSomeModuleSegueContainer)
        self.embedSomeModuleSegueContainer = embedSomeModuleSegueContainer
    }

}

extension {{ prefix }}{{ module_info.name }}ViewController {
// MARK: - UI Actions
    // TODO: Place your code here

}

extension {{ prefix }}{{ module_info.name }}ViewController {
// MARK: - Helpers
    // TODO: Place your code here

}

extension {{ prefix }}{{ module_info.name }}ViewController: {{ prefix }}{{ module_info.name }}ViewInput {
// MARK: - {{ prefix }}{{ module_info.name }}ViewInput
func configure(with theme: {{ prefix }}{{ module_info.name }}ViewInputTheme) {
// TODO: Place your code here
    }

}

extension {{ prefix }}{{ module_info.name }}ViewController: EmbedSegueContainerViewProvider {
// MARK: -EmbedSegueContainerViewProvider

    func containerViewForSegue(_ identifier: String) -> UIView? {
        switch {{ prefix }}{{ module_info.name }}ModuleContainerIdentifier(rawValue: identifier)! {
case .module1:
            return self.embedSomeModuleSegueContainer
        }
    }

}

//extension {{ prefix }}{{ module_info.name }}ViewController: ViperModuleViewControllerPresenter {
//
//   func viperModuleViewControllerShouldPresent(in viewController: UIViewController) -> Bool {
//        return true
//    }
//
//    func viperModuleViewControllerPresent(in viewController: UIViewController) {
//        viewController.present(self, animated: true)
//    }
//}

#if canImport(SwiftUI) && DEBUG
import SwiftUI

fileprivate struct {{ prefix }}{{ module_info.name }}ViewControllerContainerView: UIViewControllerRepresentable {
typealias UIViewControllerType = {{ prefix }}{{ module_info.name }}ViewController
func makeUIViewController(context: Context) -> UIViewControllerType {
        return {{ prefix }}{{ module_info.name }}ViewController()
}

    func updateUIViewController(_ uiViewController: UIViewControllerType, context: Context) {}
}

struct {{ prefix }}{{ module_info.name }}ViewController_Previews: PreviewProvider {
static var previews: some View {
{{ prefix }}{{ module_info.name }}ViewControllerContainerView()
.colorScheme(.light)
{{ prefix }}{{ module_info.name }}ViewControllerContainerView()
            .colorScheme(.dark)
    }
}
#endif