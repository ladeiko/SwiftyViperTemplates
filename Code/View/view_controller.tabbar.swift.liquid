{% include 'header' %}

import UIKit
//import ViperMcFlurryX_Swift

class {{ prefix }}{{ module_info.name }}ViewController: UITabBarController, {{ prefix }}{{ module_info.name }}ViewInput {

    // MARK: - VIPER Vars

    var output: {{ prefix }}{{ module_info.name }}ViewOutput!

    // MARK: - Outlets
    // TODO: Place your code here

    // MARK: - Vars
    // TODO: Place your code here

    // MARK: - Life cycle

    override var viewControllers: [UIViewController]? {
        set {

            newValue?.forEach({ (childViewController) in
                if let navigationController = childViewController as? UINavigationController {
                    // Propagate tabBarItem of child to the navigation controller
                    _ = navigationController.viewControllers[0].view // Load view to be sure tabBarItem is filled in viewDidLoad
                    childViewController.tabBarItem = navigationController.viewControllers[0].tabBarItem
                }
            })

            super.viewControllers = newValue
        }
        get {
            super.viewControllers
        }
    }
    
    func didReady() {
        output.viewIsReady() // call it here, it's a trick :)
    }

    // MARK: - {{ prefix }}{{ module_info.name }}ViewInput

    func configure(with theme: {{ prefix }}{{ module_info.name }}ViewInputTheme) {
        // TODO: Place your code here
    }

    // MARK: - UI Actions
    // TODO: Place your code here

    // MARK: - Helpers
    // TODO: Place your code here
}

//extension {{ prefix }}{{ module_info.name }}ViewController: ViperModuleViewControllerPresenter {
//
//   func viperModuleViewControllerShouldPresent(in viewController: UIViewController) -> Bool {
//        return true
//    }
//
//    func viperModuleViewControllerPresent(in viewController: UIViewController) {
//        viewController.present(self, animated: true)
//    }
//}

#if canImport(SwiftUI) && DEBUG
import SwiftUI

fileprivate struct {{ prefix }}{{ module_info.name }}ViewControllerContainerView: UIViewControllerRepresentable {
    typealias UIViewControllerType = {{ prefix }}{{ module_info.name }}ViewController

    func makeUIViewController(context: Context) -> UIViewControllerType {
        return {{ prefix }}{{ module_info.name }}ViewController()
    }

    func updateUIViewController(_ uiViewController: UIViewControllerType, context: Context) {}
}

struct {{ prefix }}{{ module_info.name }}ViewController_Previews: PreviewProvider {
    static var previews: some View {
        {{ prefix }}{{ module_info.name }}ViewControllerContainerView()
            .colorScheme(.light)
        {{ prefix }}{{ module_info.name }}ViewControllerContainerView()
            .colorScheme(.dark)
    }
}
#endif