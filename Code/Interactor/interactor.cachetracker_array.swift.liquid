{% include 'header' %}

import Foundation
import CacheTracker

class {{ prefix }}{{ module_info.name }}Interactor: {{ prefix }}{{ module_info.name }}InteractorInput, CacheTrackerDelegate {

    // MARK: - VIPER Vars

    weak var output: {{ prefix }}{{ module_info.name }}InteractorOutput!

    // MARK: - Vars

    private var cacheTracker: ArrayCacheTracker<{{ prefix }}{{ module_info.name }}ModuleEntityModel>?
    private var changes: [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEntityModel>] = [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEntityModel>]()
    private var items = [{{ prefix }}{{ module_info.name }}ModuleEntityModel]()
    {% if custom_parameters.extended_configure %}private var {% if custom_parameters.split_module_config_into_parameters_and_environment == "true" -%}
                                                            environment: {{ prefix }}{{ module_info.name }}ModuleInputEnvironment)!
                                                            {%- else -%}
                                                            config: {{ prefix }}{{ module_info.name }}ModuleInputConfig!
                                                            {%- endif -%}{%- endif %}

    // MARK: - {{ prefix }}{{ module_info.name }}InteractorInput

    {% if custom_parameters.extended_configure %}func configure(with {% if custom_parameters.split_module_config_into_parameters_and_environment == "true" -%}
                                                                        environment: {{ prefix }}{{ module_info.name }}ModuleInputEnvironment)
                                                                        {%- else -%}
                                                                        config: {{ prefix }}{{ module_info.name }}ModuleInputConfig)
                                                                        {%- endif -%} {
        assert(Thread.isMainThread)
        if custom_parameters.split_module_config_into_parameters_and_environment == "true" -%}
        assert(self.environment == nil)
        self.environment = environment
        {%- else -%}
        assert(self.config == nil)
        self.config = config
        {%- endif -%}
    }
    {% else %}func configure() {
        // TODO
    }{% endif %}

    func deinitialize() {
        if isDeliveringModelsListChanges() {
            stopDeliveringModelsListChanges()
        }
        // TODO: Place your code here
        {% if custom_parameters.extended_configure %}self.config = nil{% endif %}
    }

    func isDeliveringModelsListChanges() -> Bool {
        return cacheTracker != nil
    }

    func startDeliveringModelsListChanges() {
        assert(Thread.isMainThread)
        assert(cacheTracker == nil)
        cacheTracker = ArrayCacheTracker<{{ prefix }}{{ module_info.name }}ModuleEntityModel>(data: items)
        items = []
        cacheTracker!.delegate = self
        let predicate = NSPredicate(value: true)
        let sortDescriptors: [NSSortDescriptor] = [NSSortDescriptor(key: "fake", ascending: true)]
        let cacheRequest = CacheRequest(predicate: predicate, sortDescriptors: sortDescriptors)
        cacheTracker!.fetchWithRequest(cacheRequest)
    }

    func stopDeliveringModelsListChanges() {
        cacheTracker?.delegate = nil
        cacheTracker?.stopFetching()
        cacheTracker = nil
    }

    func initialStateOfModelsList() -> [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEntityModel>] {
        return cacheTracker?.transactionsForCurrentState() ?? [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEntityModel>]()
    }

    //func loadImage(for model: {{ prefix }}{{ module_info.name }}ModuleEntityModel, completion: @escaping ((_ image: UIImage?) -> Void)) { 
    //    // TODO: Place your code here
    //    DispatchQueue.main.async { completion(nil) }
    //}

    func fetchItems() {
        DispatchQueue.main.async {
            // TODO: Place your code here

            {% if custom_parameters.extended_configure %}guard self.config != nil else { return }{% endif %}
            
            self.items = []
            self.output.didFetchItems()
            //self.output.didFailedToFetchItems()
        }
    }

    // MARK: - CacheTrackerDelegate

    func cacheTrackerShouldMakeInitialReload() {
        output.modelsListDidReset(cacheTracker!.transactionsForCurrentState())
    }

    func cacheTrackerBeginUpdates() {
        changes.removeAll()
    }

    func cacheTrackerDidGenerate<P>(transactions: [CacheTransaction<P>]) where P : CacheTrackerPlainModel {
        changes.append(contentsOf: transactions as! [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEntityModel>])
    }

    func cacheTrackerEndUpdates() {
        defer {
            changes.removeAll()
        }

        guard !changes.isEmpty else {
            return
        }

        output.modelsListDidChange(changes)
    }

    // MARK: - Helpers
    // TODO: Place your code here
}
