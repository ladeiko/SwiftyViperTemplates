{% include 'header' %}

import UIKit
import OnDeallocateX
import ViperMcFlurryX_Swift

final class {{ prefix }}{{ module_info.name }}ModuleConfigurator:  ViperModuleFactory {

    func configureModuleForViewInput(viewInput: UIViewController, with config: {{ prefix }}{{ module_info.name }}ModuleInputConfig?) {
        if let viewController = viewInput as? {{ prefix }}{{ module_info.name }}ViewController {
            configure(viewController: viewController, with: config)
        }
    }

    private func configure(viewController: {{ prefix }}{{ module_info.name }}ViewController, with config: {{ prefix }}{{ module_info.name }}ModuleInputConfig?) {
        
        guard viewController.output == nil else { // prevent double configuration
            return
        }

        let router = {{ prefix }}{{ module_info.name }}Router()
        let presenter = {{ prefix }}{{ module_info.name }}Presenter()
        presenter.view = viewController
        presenter.router = router

        let interactor = {{ prefix }}{{ module_info.name }}Interactor()
        interactor.output = presenter

        presenter.interactor = interactor
        viewController.output = presenter
        viewController.moduleInputInterface = presenter
        router.transitionHandler = viewController
        router.calleeOutput = presenter

        viewController.onWillDeallocate {
            presenter.willDeinit()
        }

        if let config = config { 
            presenter.configure(with: config)
        }
    }

    func create(with config: {{ prefix }}{{ module_info.name }}ModuleInputConfig?) -> UIViewController {
        let viewController = {{ prefix }}{{ module_info.name }}ViewController()
        configureModuleForViewInput(viewInput: viewController, with: config)
        return viewController
    }

    // MARK: - ViperModuleFactory

    func instantiateModuleTransitionHandler() -> ViperModuleTransitionHandler {
        return create(with: nil)
    }
}