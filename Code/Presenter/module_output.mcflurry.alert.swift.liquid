{% include 'header' %}

import ViperMcFlurryX_Swift

@MainActor
protocol {{ prefix }}{{ module_info.name }}ModuleOutput: ViperModuleOutput {
    func {{ prefix | downcase }}{{ module_info.name | downcase }}ModuleDidDismiss(_ module: {{ prefix }}{{ module_info.name }}ModuleInput)
}

// Can be used in:
//  .thenChainUsingBlock { (moduleInput) -> ViperModuleOutput? in
//    (moduleInput as! SomeModuleInput).configure()
//    return {{ prefix }}{{ module_info.name }}ModuleDismissCompletion {
//          // todo
//    }
//}

class {{ prefix }}{{ module_info.name }}ModuleDismissCompletion: {{ prefix }}{{ module_info.name }}ModuleOutput {

    private let completion: (@MainActor () -> Void)
    private var selfRef: AnyObject?

    init(_ completion: @escaping (@MainActor () -> Void)) {
        self.completion = completion
        self.selfRef = self
    }

    func {{ prefix | downcase }}{{ module_info.name | downcase }}ModuleDidDismiss(_ module: {{ prefix }}{{ module_info.name }}ModuleInput) {
        self.completion()
        self.selfRef = nil
    }
}
