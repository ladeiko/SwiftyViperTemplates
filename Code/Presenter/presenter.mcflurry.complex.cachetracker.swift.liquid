{% include 'header' %}

import Foundation
import ViperMcFlurryX_Swift
import CacheTracker
//import UIKit

fileprivate enum {{ prefix }}{{ module_info.name }}PresenterState: Equatable {
    case initial
    case ready(isViewReady: Bool)
    case deinitialized
}

final class {{ prefix }}{{ module_info.name }}Presenter: ViperModuleInput, {{ prefix }}{{ module_info.name }}ModuleInput, {{ prefix }}{{ module_info.name }}ViewOutput, {{ prefix }}{{ module_info.name }}InteractorOutput, ViperModuleOutput {

    // MARK: - VIPER Vars

    weak var view: {{ prefix }}{{ module_info.name }}ViewInput!
    var interactor: {{ prefix }}{{ module_info.name }}InteractorInput!
    var router: {{ prefix }}{{ module_info.name }}RouterInput!
    weak var output: {{ prefix }}{{module_info.name}}ModuleOutput?
    private var state: {{ prefix }}{{ module_info.name }}PresenterState = .initial

    // MARK: - Vars
    
    private var config: {{ prefix }}{{ module_info.name }}ModuleInputConfig!

    // MARK: - Life cycle

    func willDeinit() {
        if case .ready = state {
            interactor.deinitialize()
            // TODO: Place your code here
        }
        state = .deinitialized
    }

    // MARK: - ViperModuleInput

    func setModuleOutput(_ moduleOutput: ViperModuleOutput) {
        output = moduleOutput as? {{ prefix }}{{module_info.name}}ModuleOutput
    }

    // MARK: - {{ prefix }}{{module_info.name}}ViewOutput

    func viewIsReady() {
        guard case let .ready(isViewReady) = self.state, !isViewReady else { fatalError() }
        state = .ready(isViewReady: true)

        view.configure(with: .init())

        if !interactor.isDeliveringModelsListChanges() {
            interactor.startDeliveringModelsListChanges()
        }
        else {
            let initialState = interactor.initialStateOfModelsList()
            view.loadInitialModelsList(adaptModels(initialState))
        }
        // TODO: Place your code here
    }

    //func viewNeedsImage(for model: {{ prefix }}{{ module_info.name }}ModuleEntityModel) async -> UIImage? {
    //    await interactor.loadImage(for: model)
    //}

    // MARK: - {{ prefix }}{{module_info.name}}ModuleInput

    func configure(with config: {{ prefix }}{{ module_info.name }}ModuleInputConfig) {
        guard case .initial = state else { fatalError() }
        state = .ready(isViewReady: false)
        self.config = config
        interactor.configure(with: config)
    }

    //func update(_ model: {{ prefix }}{{ module_info.name }}ModuleEntityModel) {
    //    guard model != self.config.model else { return }
    //    self.config = .init(services: self.config.services, model: model)
    //    // TODO
    //}

    // MARK: - {{ prefix }}{{ module_info.name }}InteractorOutput

    func modelsListDidReset(_ initialState: [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEntityModel>]) {
        guard case let .ready(isViewReady) = state, isViewReady else { return }
        view.loadInitialModelsList(adaptModels(initialState))
    }

    func modelsListDidChange(_ changes: [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEntityModel>]) {
        guard case let .ready(isViewReady) = state, isViewReady else { return }
        view.applyModelsListChanges(adaptModels(changes))
    }

    // MARK: - Helpers

    private func adaptModels(_ list: [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEntityModel>]) -> [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEmbeddableModel>] {
        var result = [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEmbeddableModel>]()
        for item in list {
            switch item.type {
            // we use CacheTrackerPlainRecurrentConsumer, so we
            // have to associate embeddable module only for insertions
            case .insert:
                let module = router.createEmbeddableModule(with: item.model!, lazyAllocation: false)
                let newModel = {{ prefix }}{{ module_info.name }}ModuleEmbeddableModel(model: item.model!, embed: module.embedder, updater: module.updater)
                result.append(CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEmbeddableModel>(model: newModel, index: item.index, newIndex: item.newIndex, type: item.type))

            default:
                if let model = item.model {
                    let newModel = {{ prefix }}{{ module_info.name }}ModuleEmbeddableModel(model: model)
                    result.append(CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEmbeddableModel>(model: newModel, index: item.index, newIndex: item.newIndex, type: item.type))
                }
                else {
                    result.append(CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEmbeddableModel>(model: nil, index: item.index, newIndex: item.newIndex, type: item.type))
                }
            }
        }
        return result
    }

}
