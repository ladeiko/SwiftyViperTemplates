{% include 'header' %}

import Foundation
import ViperMcFlurryX_Swift

fileprivate enum {{ prefix }}{{ module_info.name }}PresenterState: Equatable {
    case initial
    case ready(isViewReady: Bool)
    case deinitialized
}

class {{ prefix }}{{ module_info.name }}Presenter: ViperModuleInput, {{ prefix }}{{ module_info.name }}ModuleInput, {{ prefix }}{{ module_info.name }}ViewOutput, {{ prefix }}{{ module_info.name }}InteractorOutput, ViperModuleOutput {

    // MARK: - VIPER Vars

    weak var view: {{ prefix }}{{ module_info.name }}ViewInput!
    var interactor: {{ prefix }}{{ module_info.name }}InteractorInput!
    var router: {{ prefix }}{{ module_info.name }}RouterInput!
    weak var output: {{ prefix }}{{ module_info.name }}ModuleOutput?
    private var state: {{ prefix }}{{ module_info.name }}PresenterState = .initial

    // MARK: - Vars

    private var config: {{ prefix }}{{ module_info.name }}ModuleInputConfig!

    // MARK: - Life cycle

    func willDeinit() {
        if case .ready = state {
            interactor.deinitialize()
            // TODO: Place your code here
        }
        state = .deinitialized
    }

    // MARK: - ViperModuleInput

    func setModuleOutput(_ moduleOutput: ViperModuleOutput) {
        output = moduleOutput as? {{ prefix }}{{ module_info.name }}ModuleOutput
    }

    // MARK: - {{ prefix }}{{ module_info.name }}ViewOutput
    
    func viewIsReady() {

    }
    
    // MARK: - {{ prefix }}{{ module_info.name }}ModuleInput
    func configure(with config: {{ prefix }}{{ module_info.name }}ModuleInputConfig) {
        guard case .initial = state else { fatalError() }
        state = .ready(isViewReady: false)
        self.config = config
        interactor.configure(with: config)
        setupView()
    }

    //func update(_ model: {{ prefix }}{{ module_info.name }}ModuleEntityModel) {
    //    guard model != self.config.model else { return }
    //    self.config = .init(services: self.config.services, model: model)
    //    // TODO
    //}

    func setCurrent(_ tab: {{ prefix }}{{ module_info.name }}ModuleTab) {
        guard case .ready = state else { return }
        router.showTab(tab)
    }

    // MARK: - {{ prefix }}{{ module_info.name }}InteractorOutput
// TODO: Place your code here

    // MARK: - Helpers

    private func setupView() {
        guard case let .ready(isViewReady) = self.state, !isViewReady else { fatalError() }
        state = .ready(isViewReady: true)

        view.configure(with: .init())
        router.embedTabs({{ prefix }}{{ module_info.name }}ModuleTab.allCases, current: interactor.currentTab, with: config)
    // TODO: Place your code here
    }

    // TODO: Place your code here
}

extension {{ prefix }}{{ module_info.name }}Presenter: {{ prefix }}{{ module_info.name }}RouterOutput {
    func routerDidChangeCurrentModule(_ module: {{ prefix }}{{ module_info.name }}ModuleTab) {
        // TODO: Place your code here
    }

}