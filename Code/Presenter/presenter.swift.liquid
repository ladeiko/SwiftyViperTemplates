{% include 'header' %}

import Foundation

fileprivate enum {{ prefix }}{{ module_info.name }}PresenterState: Equatable {
    case initial
    case ready(isViewReady: Bool)
    case deinitialized
}

class {{ prefix }}{{ module_info.name }}Presenter: {% if custom_parameters.mcflurry_swift != "true" %}NSObject,{% endif %} {{ prefix }}{{ module_info.name }}ModuleInput, {{ prefix }}{{ module_info.name }}ViewOutput, {{ prefix }}{{ module_info.name }}InteractorOutput {

    // MARK: - VIPER Vars

    weak var view: {{ prefix }}{{ module_info.name }}ViewInput!
    var interactor: {{ prefix }}{{ module_info.name }}InteractorInput!
    var router: {{ prefix }}{{ module_info.name }}RouterInput!
    weak var output: {{ prefix }}{{module_info.name}}ModuleOutput?
    private var state: {{ prefix }}{{ module_info.name }}PresenterState = .initial

    // MARK: - Vars

    {% if custom_parameters.extended_configure %}private var {% if custom_parameters.split_module_config_into_parameters_and_environment == "true" -%}
                                                            environment: {{ prefix }}{{ module_info.name }}ModuleInputParameters!
                                                            {%- else -%}
                                                            config: {{ prefix }}{{ module_info.name }}ModuleInputConfig!
                                                            {%- endif -%}{%- endif %}

    // MARK: - Life cycle

    func willDeinit() {
        if case .ready = state {
            interactor.deinitialize()
            // TODO: Place your code here
        }
        state = .deinitialized
    }

    // MARK: - {{ prefix }}{{module_info.name}}ViewOutput

    func viewIsReady() {
        guard case let .ready(isViewReady) = self.state, !isViewReady else { fatalError() }
        state = .ready(isViewReady: true)

        view.configure(with: .init())
        // TODO: Place your code here
    }

    // MARK: - {{ prefix }}{{module_info.name}}ModuleInput

    {% if custom_parameters.extended_configure %}func configure(with config: {{ prefix }}{{ module_info.name }}ModuleInputConfig) {% else %}func configure() {% endif %}{
        assert(Thread.isMainThread)
        guard case .initial = state else { fatalError() }
        state = .ready(isViewReady: false)
        {% if custom_parameters.extended_configure %}
        self.config = config
        interactor.configure(with: config)
        {% else %}interactor.configure(){% endif %}
    }

    func setOutput(_ output: {{ prefix }}{{ module_info.name }}ModuleOutput) {
        self.output = output
    }

    // MARK: - {{ prefix }}{{ module_info.name }}InteractorOutput
    // TODO: Place your code here

    // MARK: - Helpers
    // TODO: Place your code here
}
